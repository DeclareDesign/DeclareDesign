% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/declare_test.R
\name{declare_test}
\alias{declare_test}
\alias{tidy_test}
\title{Declare test}
\usage{
declare_test(..., handler = estimator_handler, label = "estimator")

tidy_test(fn)
}
\arguments{
\item{...}{arguments to be captured, and later passed to the handler}

\item{handler}{a tidy-in, tidy-out function}

\item{label}{a string describing the step}

\item{fn}{A function that takes a data.frame as an argument and returns a data.frame with the test statistic (and other inferential statistics) and a label.}
}
\value{
A function that accepts a data.frame as an argument and returns a data.frame containing the value of the test statistic and other inferential statistics.
}
\description{
Declares an test which generates a test statistic and associated inferential statistics. 

Use of \code{declare_test} is identical to use of \code{\link{declare_estimator}}. Use \code{declare_test} for hypothesis testing with no specific estimand in mind; use \code{declare_estimator} for hypothesis testing when you can link each estimate to an estimand. For example, \code{declare_test} could be used for a K-S test of distributional equality and \code{declare_estimator} for a difference-in-means estimate of an average treatment effect.
}
\details{
\code{tidy_test} takes an untidy test function, and returns a tidy handler which accepts standard labeling options.
}
\examples{

# balance_test_design <- 
#   declare_population(N = 100, cov1 = rnorm(N), cov2 = rnorm(N), cov3 = rnorm(N)) +
#   declare_assignment(prob = 0.2) + 
#   declare_test(Z ~ cov1 + cov2 + cov3, model = lm_robust, post_estimation = glance)
#   
# diagnosis <- diagnose_design(
#   design = balance_test_design,
#   diagnosands = declare_diagnosands(false_positive_rate = mean(p.value <= 0.05), keep_defaults = FALSE)
# )

# Thanks to Jake Bowers for this example

library(coin) 

our_ttest <- function(data) {
  res <- coin::oneway_test(
    outcome ~ factor(Xclus),
    data = data,
    distribution = "asymptotic"
  )
  data.frame(p.value = pvalue(res)[[1]])
}

ttest_design <- 
  declare_population(N = 100, Xclus = rbinom(n = N, size = 1, prob = 0.2), outcome = 3 + rnorm(N)) +
  declare_test(handler = tidy_test(our_ttest), label = "t-test")
  
diagnosis <- diagnose_design(
  design = ttest_design,
  diagnosands = declare_diagnosands(false_positive_rate = mean(p.value <= 0.05), keep_defaults = FALSE)
)

}
