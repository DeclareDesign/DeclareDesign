% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compare_designs.R
\name{compare_designs}
\alias{compare_designs}
\title{compare_designs}
\usage{
compare_designs(..., display = c("highlights", "all", "none"),
  sort_comparisons = TRUE, Rmd_file_prefix = NULL)
}
\arguments{
\item{...}{A design or set of designs typically created using the + operator, or a \code{data.frame} of simulations, typically created by \code{\link{simulate_design}}.}

\item{display}{c("highlights", "all", "none"), where highlights is the default.}

\item{sort_comparisons}{Logical: order rows by Jaccard similarity to the first design?}

\item{Rmd_file_prefix}{Optional. If provided, creates Rmd template based on display type. E.g., "my_comparison".}
}
\value{
Invisibly returns list containing requested data frames (overview and/or highlights).
}
\description{
Compare designs. For best results, use a consistent syntax style across designs 
(e.g., do not switch between '=' and '<-' for assignment or 
include optional parentheses on some designs but not others).
}
\examples{
d1 <- declare_population(N = 100) +
declare_assignment(m = 50) +
declare_potential_outcomes(Y ~ rbinom(n = N, size = 1, prob = 0.5 + .1*Z)) +
declare_estimand(ATE = 0.3) +
declare_estimator(Y ~ Z)
d2 <- declare_population(N = 100) +
 declare_assignment(m = 50) +
 declare_potential_outcomes(Y ~ rpois(n = N, lambda = 0.5 + .1*Z)) +
 declare_estimand(ATE = 0.3) +
 declare_estimator(glm(Y ~ Z, family = poisson))

d3 <- declare_population(N = 200) +
 declare_assignment(m = 100) +
 declare_potential_outcomes(Y ~ rpois(n = N, lambda = 0.5 + .1*Z)) +
 declare_estimand(ATE = 0.3) +
 declare_estimator(glm(Y ~ Z, family = poisson))

compare_designs(d1, d2, d3)
compare_designs(d1, d2, d3, , display = "all")
my_comparison <- compare_designs(d1, d2, d3)
my_comparison <- compare_designs(d1, d2, d3, Rmd_file_prefix = "my_report")

# Do not change what helper functions do mid-comparison.
# For example, don't:
g <- function(X) 2*X
d1 <- declare_population(N = 2, X = 1:2, Y = g(X)) + NULL
g <- function(X) 3*X
d2 <- declare_population(N = 2, X = 1:2, Y = g(X)) + NULL
compare_designs(d1, d2)
# > compare_designs(d1, d2)
# The above misses the key difference. Instead, do:
g1 <- function(X) 2*X
d1 <- declare_population(N = 2, X = 1:2, Y = g1(X)) + NULL
g2 <- function(X) 3*X
d2 <- declare_population(N = 2, X = 1:2, Y = g2(X)) + NULL
compare_designs(d1, d2)
# Highlights
# Differences detected between steps:
# [1] "declare_population(N = 2, X = 1:2, Y = g2(X))"
}
