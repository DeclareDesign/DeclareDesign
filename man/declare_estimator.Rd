% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/declare_estimator.R
\name{declare_estimator}
\alias{declare_estimator}
\alias{tidy_estimator}
\alias{model_handler}
\alias{estimator_handler}
\title{Declare an Estimator}
\usage{
declare_estimator(..., handler = estimator_handler, label = "my_estimator")

tidy_estimator(estimator_function)

model_handler(data, ..., model = estimatr::difference_in_means,
  coefficient_names = FALSE)

estimator_handler(data, ..., model = estimatr::difference_in_means,
  coefficient_names = FALSE, estimand = NULL, label)
}
\arguments{
\item{...}{arguments to be captured, and later passed to the handler}

\item{handler}{a tidy-in, tidy-out function}

\item{label}{a string describing the step}

\item{estimator_function}{A function that takes a data.frame as an argument and returns a data.frame with the estimates, summary statistics (i.e., standard error, p-value, and confidence interval) and a label.}

\item{data}{a data.frame}

\item{model}{A model function, e.g. lm or glm. By default, the model is the \code{\link{difference_in_means}} function from the \link{estimatr} package.}

\item{coefficient_names}{A character vector of coefficients that represent quantities of interest, i.e. Z. If FALSE, return the first non-intercept coefficient; if TRUE return all coefficients.}

\item{estimand}{a declare_estimand step object, or a character label, or a list of either}
}
\value{
a function that accepts a data.frame as an argument and returns a data.frame containing the value of the estimator and associated statistics.
}
\description{
Declare an Estimator

\code{tidy_estimator} takes an untidy estimation function, and returns a tidy handler which accepts standard labelling options.
}
\section{Custom Estimators}{


\code{estimator_functions} implementations should be tidy (accept and return a data.frame)

\code{model} implementations should at the miminum provide S3 methods for \code{summary} and \code{confint}.
}

\examples{

my_population <- declare_population(N = 100)

my_potential_outcomes <- declare_potential_outcomes(
  formula = Y ~ .25 * Z,
  conditions = c(0, 1))

my_estimand <- declare_estimand(ATE = mean(Y_Z_1 - Y_Z_0))

my_assignment <- declare_assignment(m = 50)

my_reveal <- declare_reveal()

design <- declare_design(
 my_population, my_potential_outcomes,
 my_estimand, my_assignment, my_reveal
)

df <- draw_data(design)

my_estimator_dim <- declare_estimator(Y ~ Z, estimand = my_estimand)

my_estimator_dim(df)

# Use the linear regression (lm) function
# with robust standard errors from the estimatr package

my_estimator_lm <-
 declare_estimator(Y ~ Z,
                   model = estimatr::lm_robust,
                   coefficient_name = "Z",
                   estimand = my_estimand)

my_estimator_lm(df)

# Use R's built-in lm function via model

estimator_lm <- declare_estimator(Y ~ Z, model = lm)

# Run a probit regression using glm via model

estimator_probit <-
  declare_estimator(
    Y ~ Z,
    model = glm,
    family = binomial(link = "probit"),
    coefficient_name = "Z"
 )

# Use a custom estimator function

my_estimator_function <- function(data){
  data.frame(est = with(data, mean(Y)))
}

my_estimator_custom <-
  declare_estimator(handler = tidy_estimator(my_estimator_function),
                    estimand = my_estimand)

my_estimator_custom(df)

}
