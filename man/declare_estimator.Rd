% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/declare_estimator.R
\name{declare_estimator}
\alias{declare_estimator}
\title{Declare an Estimator}
\usage{
declare_estimator(..., handler = estimator_handler, label = "my_estimator")
}
\arguments{
\item{...}{Arguments to the estimand function. For example, you could specify the formula for your estimator, i.e., formula = Y ~ Z + age.}

\item{label}{An optional label to name the estimator, such as DIM.}

\item{estimator_function}{A function that takes a data.frame as an argument and returns a data.frame with the estimates, summary statistics (i.e., standard error, p-value, and confidence interval) and a label.}

\item{model}{A model function, e.g. lm or glm. If model is specified, the estimator_function argument is ignored.By default, the model is the \code{\link{difference_in_means}} function from the \link{estimatr} package.}

\item{coefficient_name}{A character vector of coefficients that represent quantities of interest, i.e. Z. Only relevant when a \code{model} is chosen or for some \code{estimator_function}'s such as \code{difference_in_means} and \code{lm_robust}.}

\item{estimand}{An estimand object created using \code{\link{declare_estimand}}. Estimates from this estimator function will be associated with the estimand, for example for calculating the bias and coverage of the estimator.}
}
\value{
a function that accepts a data.frame as an argument and returns a data.frame containing the value of the estimator and associated statistics.
}
\description{
Declare an Estimator
}
\section{Custom Estimators}{


\code{estimator_functions} implementations should be tidy (accept and return a data.frame)

\code{model} implementations should at the miminum provide S3 methods for \code{summary} and \code{confint}.
}

\examples{

my_population <- declare_population(N = 100)

my_potential_outcomes <- declare_potential_outcomes(
  formula = Y ~ .25 * Z,
  condition_names = c(0, 1))

my_estimand <- declare_estimand(ATE = mean(Y_Z_1 - Y_Z_0))

my_assignment <- declare_assignment(m = 50)

design <- declare_design(
 my_population, my_potential_outcomes,
 my_estimand, my_assignment, reveal_outcomes
)

df <- draw_data(design)

my_estimator_dim <- declare_estimator(Y ~ Z, estimand = my_estimand)

my_estimator_dim(df)

# Use the linear regression (lm) function
# with robust standard errors from the estimatr package

my_estimator_lm <-
 declare_estimator(Y ~ Z,
                   model = estimatr::lm_robust,
                   coefficient_name = "Z",
                   estimand = my_estimand)

my_estimator_lm(df)

# Use R's built-in lm function via model

estimator_lm <- declare_estimator(Y ~ Z, model = lm)

# Run a probit regression using glm via model

estimator_probit <-
  declare_estimator(
    Y ~ Z,
    model = glm,
    family = binomial(link = "probit"),
    coefficient_name = "Z"
 )

# Use a custom estimator function

my_estimator_function <- function(formula, data){
  data.frame(est = with(data, mean(Y)))
}

my_estimator_custom <-
  declare_estimator(Y ~ Z,
                    estimator_function = my_estimator_function,
                    estimand = my_estimand)

my_estimator_custom(df)

}
