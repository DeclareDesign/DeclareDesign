% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/declare_estimator.R
\name{declare_estimator}
\alias{declare_estimator}
\alias{tidy_estimator}
\alias{model_handler}
\alias{estimator_handler}
\title{Declare Estimator}
\usage{
declare_estimator(..., handler = estimator_handler, label = "my_estimator")

tidy_estimator(estimator_function)

model_handler(data, ..., model = estimatr::difference_in_means,
  coefficients = FALSE)

estimator_handler(data, ..., model = estimatr::difference_in_means,
  coefficients = FALSE, estimand = NULL, label)
}
\arguments{
\item{...}{arguments to be captured, and later passed to the handler}

\item{handler}{a tidy-in, tidy-out function}

\item{label}{a string describing the step}

\item{estimator_function}{A function that takes a data.frame as an argument and returns a data.frame with the estimates, summary statistics (i.e., standard error, p-value, and confidence interval) and a label.}

\item{data}{a data.frame}

\item{model}{A model function, e.g. lm or glm. By default, the model is the \code{\link{difference_in_means}} function from the \link{estimatr} package.}

\item{coefficients}{Symbols or literal character vector of coefficients that represent quantities of interest, i.e. Z. If FALSE, return the first non-intercept coefficient; if TRUE return all coefficients. To escape non-standard-evaluation use \code{!!}.}

\item{estimand}{a declare_estimand step object, or a character label, or a list of either}
}
\value{
a function that accepts a data.frame as an argument and returns a data.frame containing the value of the estimator and associated statistics.
}
\description{
Declares an estimator which generates estimates and associated statistics

\code{tidy_estimator} takes an untidy estimation function, and returns a tidy handler which accepts standard labelling options.
}
\section{Custom Estimators}{


\code{estimator_functions} implementations should be tidy (accept and return a data.frame)

\code{model} implementations should at the miminum provide S3 methods for \code{summary} and \code{confint}.
}

\examples{

# First, set up the rest of a design
set.seed(42)
my_population <- declare_population(N = 100, X = rnorm(N))

my_potential_outcomes <- declare_potential_outcomes(
  formula = Y ~ .25 * Z + rnorm(N),
  conditions = c(0, 1)
)

my_estimand <- declare_estimand(ATE = mean(Y_Z_1 - Y_Z_0))

my_assignment <- declare_assignment(m = 50)

my_reveal <- declare_reveal()

# ----------
# 1. Default estimator
# ----------

# Default is the `difference_in_means` estimator from `estimatr`
# Automatically uses first non-intercept coefficient as estimate
my_estimator_dim <- declare_estimator(Y ~ Z, estimand = my_estimand)

design_def <- declare_design(
  my_population, my_potential_outcomes,
  my_estimand, my_assignment, my_reveal,
  my_estimator_dim
)

conduct_design(design_def)

# Can also use declared estimator on a data.frame
dat <- draw_data(design_def)
my_estimator_dim(dat)

# ----------
# 2. Using existing estimators
# ----------

# Use linear regression with robust standard errors from
# `estimatr` package
my_estimator_lm_rob <-
  declare_estimator(Y ~ Z, estimand = my_estimand, model = estimatr::lm_robust)

design <- replace_step(design_def, my_estimator_dim, my_estimator_lm_rob)

conduct_design(design)

# Set `coefficient`` if estimate of interest is not the
# first non-intercept variable
my_estimator_lm_rob_x <- declare_estimator(
  Y ~ X + Z,
  estimand = my_estimand,
  coefficients = "Z",
  model = estimatr::lm_robust
)

# Use linear regression from base R
my_estimator_lm <-
  declare_estimator(Y ~ Z, estimand = my_estimand, model = lm)

design <- replace_step(design_def, my_estimator_dim, my_estimator_lm)

conduct_design(design)

# Use glm from base R
my_estimator_glm <- declare_estimator(
  Y ~ X + Z,
  family = "gaussian",
  estimand = my_estimand,
  coefficients = "Z",
  model = glm
)

design <- replace_step(design_def, my_estimator_dim, my_estimator_glm)

conduct_design(design)

# ----------
# 3. Using custom estimators
# ----------

# Define your own estimator and use the `tidy_estimator` function
# Must have `data` argument that is a data.frame
my_estimator_function <- function(data){
  data.frame(est = with(data, mean(Y)))
}

my_estimator_custom <-
  declare_estimator(handler = tidy_estimator(my_estimator_function),
                    estimand = my_estimand)

design <- replace_step(design_def, my_estimator_dim, my_estimator_custom)

conduct_design(design)

# The names in your custom estimator return must match with
# your diagnosands when diagnosing a design
my_median <- function(data){
  data.frame(med = with(data, median(Y)))
}

my_estimator_median <-
  declare_estimator(handler = tidy_estimator(my_median),
                    estimand = my_estimand)

design <- replace_step(design_def, my_estimator_dim, my_estimator_median)

conduct_design(design)

my_diagnosand <- declare_diagnosands(med_to_estimand = mean(med - estimand))
diagnose_design(design, diagnosands = my_diagnosand, sims = 5, bootstrap = F)

# ----------
# 4. Multiple estimators per estimand
# ----------

# Both DIM and robust lm estimators
my_estimator_dim <- declare_estimator(
  Y ~ Z,
  estimand = my_estimand,
  label = "DIM"
)

my_estimator_lm <- declare_estimator(
  Y ~ Z,
  estimand = my_estimand,
  model = lm,
  label = "LM"
)

design_two <- declare_design(
  my_population, my_potential_outcomes,
  my_estimand, my_assignment, my_reveal,
  my_estimator_dim, my_estimator_lm
)

conduct_design(design_two)

}
