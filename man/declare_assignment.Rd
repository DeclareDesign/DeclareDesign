% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/declare_assignment.R
\name{declare_assignment}
\alias{declare_assignment}
\alias{assignment_handler}
\title{Declare Assignment Procedure}
\usage{
declare_assignment(..., handler = assignment_handler, label = NULL)

assignment_handler(data, ..., assignment_variable = "Z")
}
\arguments{
\item{...}{arguments to be captured, and later passed to the handler}

\item{handler}{a tidy-in, tidy-out function}

\item{label}{a string describing the step}

\item{data}{a data.frame}

\item{assignment_variable}{name for assignment variable}
}
\value{
a function that takes a data.frame as an argument and returns a data.frame with additional columns appended including an assignment variable and (optionally) probabilities of assignment.
}
\description{
Declare Assignment Procedure
}
\details{
While declare_assignment can work with any assignment_function that takes data and returns data, most random assignment procedures can be easily implemented with randomizr.
The arguments to \code{\link{conduct_ra}} can include N, block_var, clust_var, m, m_each, prob, prob_each, block_m, block_m_each = NULL, block_prob, block_prob_each, num_arms, and conditions.
The arguments you need to specify are different for different designs. Check the help files for \code{\link{complete_ra}},
\code{\link{block_ra}}, \code{\link{cluster_ra}}, or \code{\link{block_and_cluster_ra}} for details on how to execute many common designs.

Custom assignment handlers should augment the data frame with an appropriate column for the assignments.
}
\examples{

########################################################
# Default Handler
# Delegates to conduct_ra

my_assignment <- declare_assignment(m = 50)
my_assignment <- declare_assignment(block_prob = 1/3, blocks = female)
my_assignment <- declare_assignment(block_prob = 1/4, clusters = classrooms)

my_assignment <- declare_assignment(
  block_prob = 1/4,
  clusters = classrooms,
  assignment_variable = "X1"
)

########################################################
#' # Custom random assignment functions

my_assignment_function <- function(data) {
   data$Z <- ifelse(data$extra <= median(data$extra), 1, 0)
   data
}

my_assignment_custom <- declare_assignment(handler = my_assignment_function)

df <- my_assignment_custom(sleep)
table(df$Z, df$group)
}
