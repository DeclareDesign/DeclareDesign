% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/declare_reveal.R
\name{declare_reveal}
\alias{declare_reveal}
\alias{reveal_outcomes_handler}
\title{Declare a Reveal Outcomes step}
\usage{
declare_reveal(..., handler = reveal_outcomes_handler, label = NULL)

reveal_outcomes_handler(data = NULL, outcome_variables = Y,
  assignment_variables = Z, attrition_variables = NULL, ...)
}
\arguments{
\item{...}{arguments to be captured, and later passed to the handler}

\item{handler}{a tidy-in, tidy-out function}

\item{label}{a string describing the step}

\item{data}{A data.frame containing columns of potential outcomes and an assignment variable}

\item{outcome_variables}{The outcome prefix(es) of the potential outcomes}

\item{assignment_variables}{The bare (unquote) name(s) of the assignment variable}

\item{attrition_variables}{The bare (unquote) name of the attrition variable}
}
\description{
Potential outcomes declarations indicating what outcomes exist as a function of assignment variables. But one more step is required, revealing outcomes after treatment is realized. \code{declare_reveal} declares the set of outcome variable names, for example created by \code{declare_potential_outcomes} and the set of assignment variables \code{declare_assignment}.
}
\details{
\code{declare_reveal} declares the realization of outcomes. Typically, when you create a design with \code{declare_design}, the reveal outcomes step is automatically added. When you use the outcome `Y` and a single assignment variable named `Z`, \code{declare_design} adds a reveal outcomes step at the appropriate point. If you have multiple outcomes to reveal or different names for the outcome or assignment variables, use \code{declare_reveal} to customize which outcomes are revealed.

Designs for causal inference includes a potential outcomes declaration and an assignment declaration. Reveal outcomes uses the random assignment to pluck out the correct potential outcomes. This is analogous to the "switching equation" (Gerber and Green 2012, Chapter 2).
}
\examples{

my_population <- declare_population(N = 100, noise = rnorm(N))

my_potential_outcomes <- declare_potential_outcomes(
  Y_Z_0 = noise, Y_Z_1 = noise +
  rnorm(N, mean = 2, sd = 2))

my_assignment <- declare_assignment(m = 50)

my_reveal <- declare_reveal()

design <- my_population + 
  my_potential_outcomes + 
  my_assignment + 
  my_reveal

design

# By default, declare_design, results in the same design being 
#  created, because it automatically adds a declare_reveal step.

design <- my_population + my_potential_outcomes + my_assignment
                         
# Declaring multiple assignment variables can be done easily with !!! syntax.

my_outcomes <- c("Y1", "Y2", "Y3")

my_reveal <- declare_reveal(outcome_variables = !!!my_outcomes)

}
