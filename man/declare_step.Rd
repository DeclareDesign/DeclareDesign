% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/declare_step.R
\name{declare_step}
\alias{declare_step}
\title{Declare a custom step}
\usage{
declare_step(..., handler = fabricate, label = NULL)
}
\arguments{
\item{...}{arguments to be captured, and later passed to the handler}

\item{handler}{a tidy-in, tidy-out function}

\item{label}{a string describing the step}
}
\value{
a function that returns a data.frame
}
\description{
With declare_step, you can include any function that takes data as one of its arguments and returns data in a design declaration. The first argument is always a "handler", which is the name of the data-in, data-out function.
}
\examples{

N <- 50
my_population <- declare_population(N = N, noise = rnorm(N))
my_assignment <- declare_assignment(m = 25)

# use fabricate as the custom step
my_step <- declare_step(fabricate, Z2 = Z, q = 5)

design <- my_population + my_assignment + my_step

# use dplyr's mutate
my_step <- declare_step(dplyr::mutate, Z2 = Z, q = 5)

design <- my_population + my_assignment + my_step

}
