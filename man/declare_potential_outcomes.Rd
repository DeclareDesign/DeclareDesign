% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/declare_potential_outcomes.R
\name{declare_potential_outcomes}
\alias{declare_potential_outcomes}
\alias{potential_outcomes_internal.formula}
\alias{potential_outcomes_internal.NULL}
\title{Declare potential outcomes}
\usage{
declare_potential_outcomes(
  ...,
  handler = potential_outcomes_handler,
  label = NULL
)

potential_outcomes_internal.formula(
  formula,
  conditions = c(0, 1),
  assignment_variables = "Z",
  data,
  level = NULL,
  label = outcome_variable
)

potential_outcomes_internal.NULL(
  formula = stop("Not provided"),
  ...,
  data,
  level = NULL
)
}
\arguments{
\item{...}{arguments to be captured, and later passed to the handler}

\item{handler}{a tidy-in, tidy-out function}

\item{label}{a string describing the step}

\item{formula}{a formula to calculate potential outcomes as functions of assignment variables.}

\item{conditions}{see \code{\link{expand_conditions}}. Provide values (e.g. \code{conditions = 1:4}) for a single assignment variable. If multiple assignment variables, provide named list (e.g. \code{conditions = list(Z1 = 0:1, Z2 = 0:1)}). Defaults to 0:1 if no conditions provided.}

\item{assignment_variables}{The name of the assignment variable. Generally not required as names are taken from \code{conditions}.}

\item{data}{a data.frame}

\item{level}{a character specifying a level of hierarchy for fabricate to calculate at}
}
\value{
a function that returns a data.frame
}
\description{
Declare potential outcomes
}
\details{
A \code{declare_potential_outcomes} function is used to create outcomes that each unit would express in each possible treatment condition.
}
\examples{

# Potential outcomes can be declared in two ways: 
# by using a formula or as separate variables.


# Using a formula
declare_population(N = 100, U = rnorm(N)) +
  declare_potential_outcomes(Y ~ 0.5*Z + U)
  
# As separate variables
declare_population(N = 100, U = rnorm(N)) +
  declare_potential_outcomes(Y_Z_0 = U,
                             Y_Z_1 = U + 0.5)
# (notice the naming structure: outcome_assignment_condition: Y_Z_1)  

  
# You can change the name of the outcome
declare_population(N = 100, U = rnorm(N)) +
  declare_potential_outcomes(Y2 ~ 0.5*Z + U)
  
# You can change the name of the assignment_variable
declare_population(N = 100, U = rnorm(N)) +
  declare_potential_outcomes(Y ~ 0.5*D + U, assignment_variable = "D")
  

# `conditions` defines the "range" of the potential outcomes function
declare_population(N = 100, age = sample(18:65, N, replace = TRUE)) +
  declare_potential_outcomes(formula = Y ~ .05 + .25 * Z + .01 * age * Z,
                             conditions = 1:4)

# Multiple assignment variables can be specified in `conditions`. For example,
# in a 2x2 factorial potential outcome:

declare_population(N = 100, age = sample(18:65, N, replace = TRUE)) +
  declare_potential_outcomes(formula = Y ~ .05 + .25 * Z1 + .01 * age * Z2,
                             conditions = list(Z1 = 0:1, Z2 = 0:1))

}
